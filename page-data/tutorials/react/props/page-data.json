{"componentChunkName":"component---src-templates-mdx-template-js","path":"/tutorials/react/props/","result":{"data":{"mdx":{"fields":{"slug":"/tutorials/react/props/"},"frontmatter":{"date":"4 months ago","theme":"react","title":"Props","next":"/tutorials/react/state","prev":"/tutorials/react/components"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Props\",\n  \"date\": \"2019-12-22T00:00:00.000Z\",\n  \"theme\": \"react\",\n  \"next\": \"/tutorials/react/state\",\n  \"prev\": \"/tutorials/react/components\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Intro\"), mdx(\"p\", null, \"React props are read-only data that gets passed to the react component.\"), mdx(\"p\", null, \"Consider the following snippet:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const MakeNameBold = (props) => <b>{props.name}</b>;\\n\")), mdx(\"p\", null, \"We have a component that takes whatever props.name is and it returns it bold.\"), mdx(\"p\", null, \"The component could be used like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"noInline=true\",\n    \"noInline\": \"true\"\n  }), \"const MakeNameBold = (props) => <b>{props.name}</b>;\\n\\nconst DisplayName = (props) => (\\n  <div>\\n    <MakeNameBold name={props.name} />\\n  </div>\\n);\\n\\nrender(<DisplayName name=\\\"Bacon Cheese and Garlic\\\" />);\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Result: \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"render=true noInline=true\",\n    \"render\": \"true\",\n    \"noInline\": \"true\"\n  }), \"const MakeNameBold = (props) => <b>{props.name}</b>;\\n\\nconst DisplayName = (props) => (\\n  <div>\\n    <MakeNameBold name={props.name} />\\n  </div>\\n);\\n\\nrender(<DisplayName name=\\\"Bacon Cheese and Garlic\\\" />);\\n\")), mdx(\"br\", null), mdx(\"h2\", null, \"Props Like Commands\"), mdx(\"p\", null, \"What if we wanted to use props like commands to our components?\"), mdx(\"p\", null, \"We will pass an additional prop: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"props.showAs\"), \" which will hold the value \\\"bold\\\" or \\\"italic\\\".\"), mdx(\"p\", null, \"We'll also rename our MakeNameBold function to ShowName.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }), \"function ShowName(props) {\\n  switch (props.showAs) {\\n    case \\\"bold\\\":\\n      return <b>{props.name}</b>;\\n      break;\\n    case \\\"italic\\\":\\n      return <i>{props.name}</i>;\\n      break;\\n    default:\\n      return <p>unknown style: bold or italic</p>;\\n  }\\n}\\n\\nconst DisplayName = (props) => (\\n  <div>\\n    <ShowName name={props.name} showAs={props.showAs} />\\n  </div>\\n);\\n\\nrender(<DisplayName name=\\\"Attack on Titan\\\" showAs=\\\"bold\\\" />);\\n\")), mdx(\"h2\", null, \"Mapping Data With Props\"), mdx(\"p\", null, \"Our site provides dummy data sets. For our next example we will be using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/datasets/Users15.json\"\n  }), \"/datasets/Users15.json\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }), \"const MakeNameBold = (props) => <b>hi</b>;\\n\\nclass DisplayUsers extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = { users: [] };\\n  }\\n\\n  componentDidMount() {\\n    fetch(\\\"/datasets/Users15.json\\\")\\n      .then((res) => res.json())\\n      .then((res) => this.setState({ users: res.Users }));\\n  }\\n\\n  render() {\\n    const listItems = this.state.users.map((user) => (\\n      <li key={user.id}>{user.name}</li>\\n    ));\\n\\n    return (\\n      <center>\\n        <ul>{listItems}</ul>\\n      </center>\\n    );\\n  }\\n}\\n\\nrender(<DisplayUsers />);\\n\")), mdx(\"h2\", null, \"Default Props\"), mdx(\"p\", null, \"Sometimes a certain prop may not be used, so in that case default prop values can be declared as such:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }), \"function ShowName(props) {\\n  switch (props.showAs) {\\n    case \\\"bold\\\":\\n      return <b>{props.name}</b>;\\n      break;\\n    case \\\"italic\\\":\\n      return <i>{props.name}</i>;\\n      break;\\n    default:\\n      return <p>unknown style: bold or italic</p>;\\n  }\\n}\\n\\nconst DisplayName = (props) => (\\n  <div>\\n    <ShowName name={props.name} showAs={props.showAs} />\\n  </div>\\n);\\n\\nDisplayName.defaultProps = {\\n  name: \\\"Unassigned\\\",\\n  showAs: \\\"bold\\\",\\n};\\n\\nrender(<DisplayName name=\\\"Attack on Titan\\\" />);\\n\")), mdx(\"p\", null, \"We provided no showAs prop, so it is given \\\"bold\\\" by default.\"), mdx(\"h2\", null, \"Props and the Spread Operator\"), mdx(\"p\", null, \"The js \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"...\"), \" operator can be used to assign props to components\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }), \"myProps = {\\n  id: 7,\\n  name: \\\"Team Fortress 2\\\",\\n  characters: [\\\"Scout\\\", \\\"Spy\\\", \\\"Docter\\\"],\\n};\\n\\nfunction DisplayGame(props) {\\n  return (\\n    <div>\\n      <p>{JSON.stringify(props)}</p>\\n      <p>\\n        <b>id:</b> {props.id}\\n      </p>\\n      <p>\\n        <b>name:</b> {props.name}\\n      </p>\\n      <p>\\n        <b>characters:</b> {props.characters.join(\\\", \\\")}\\n      </p>\\n    </div>\\n  );\\n}\\n\\nrender(<DisplayGame {...myProps} />);\\n\")), mdx(\"h2\", null, \"Assessments\"), mdx(\"h3\", null, \"You will have to answer a bunch of questions\"), mdx(MCQ, {\n    qs: \"How would you access Props inside a Component? (Rooms is an Attribute to some element)\",\n    op1: \"props.rooms\",\n    op2: \"props.getRooms()\",\n    op3: \"SomeArray[] = this.props\",\n    op4: \"this.props.rooms\",\n    desc: \"Solution: this.props.rooms\",\n    mdxType: \"MCQ\"\n  }), mdx(Threechoicemcq, {\n    qs: \"How do you pass Props to Components?\",\n    op1: \"using HTML DOM elements\",\n    op2: \"as function arguments\",\n    op3: \"Object Reference\",\n    desc: \"Solution: as function arguments\",\n    mdxType: \"Threechoicemcq\"\n  }), mdx(Threechoicemcq, {\n    qs: \"How would you pass Props to a Component if you had a constructor? (Rooms is an Attribute to some element)\",\n    op1: \"super(props)\",\n    op2: \"this.rooms = props.rooms\",\n    op3: \"const room = this.props{rooms: \\u201D2\\u201D}\",\n    desc: \"Solution: super(props)\",\n    mdxType: \"Threechoicemcq\"\n  }), mdx(Truefalse, {\n    qs: \"Props are Immutable\",\n    op1: \"True\",\n    op2: \"False\",\n    desc: \"Solution: True\",\n    mdxType: \"Truefalse\"\n  }), mdx(Threechoicemcq, {\n    qs: \"How do you use Default Props?\",\n    op1: \"Adding to reactDom.render()\",\n    op2: \"Setting the properties inside Component Constructor\",\n    op3: \"It is set directly during run-time\",\n    desc: \"Solution: Setting the properties inside Component Constructor\",\n    mdxType: \"Threechoicemcq\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/react/props/"}}}