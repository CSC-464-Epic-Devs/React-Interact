{"componentChunkName":"component---src-templates-mdx-template-js","path":"/projects/react/counterapp/","result":{"data":{"mdx":{"fields":{"slug":"/projects/react/counterapp/"},"frontmatter":{"date":"15 days ago","theme":"React","title":"CounterApp Tutorial"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CounterApp Tutorial\",\n  \"date\": \"2019-12-06T00:00:00.000Z\",\n  \"theme\": \"React\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"React Counter App Tutorial\"), mdx(\"p\", null, \"Let\\u2019s build a simple counter button in React that will update every time it is clicked.\"), mdx(\"p\", null, \"To start, create a new React app called counter using create-react-app.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ npx create-react-app counter\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ cd counter\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ npm start\")), mdx(\"p\", null, \"Open your web browser to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:3000/\"\n  }), \"http://localhost:3000/\"), \" to see the standard React welcome page.\\nWe only need to update the src/App.js file in this tutorial.\"), mdx(\"h2\", null, \"Counter Component\"), mdx(\"p\", null, \"Now we need to create our Counter component. First we can add it to App.\\nThen create Counter and include a static button which will be set to 0.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/App.js\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <Counter />\\n      </div>\\n    );\\n  }\\n}\\n\\nclass Counter extends Component {\\n\\n  render() {\\n    return <button>0</button>;\\n  }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"If you go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:3000/\"\n  }), \"http://localhost:3000/\"), \" you\\u2019ll see our static button now.\"), mdx(\"h2\", null, \"Updating State\"), mdx(\"p\", null, \"it is much more readable\\u2013and performant\\u2013to move this outside of render() to its own method called handleClick\\nwhich is also an arrow function so that it only fires upon a button click.\\nA nice feature of arrow functions is that this is implicitly set for us so we don\\u2019t also have to explicitly bind our function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/App.js\\nclass Counter extends Component {\\n    constructor() {\\n    this.state = {\\n      count: 0\\n    };\\n\\n    this.handleClick = () => {\\n      this.setState(({ count }) => ({\\n        count: count + 1\\n      }));\\n    };\\n  };\\n  render() {\\n    return <button onClick={this.handleClick}>{this.state.count}</button>;\\n  }\\n}\\n\")), mdx(\"p\", null, \"As a final optimization we can use prevState which is built into React.\\nIt is a callback function that refers to the previous state and since setState()\\nis asynchronous, using prevState ensures no errors around this timing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-React\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }), \"class Counter extends React.Component {\\n    constructor() {\\n    this.state = {\\n      count: 0\\n    };\\n\\n    this.handleClick = () => {\\n      this.setState(({ count }) => ({\\n        count: count + 1\\n      }));\\n    };\\n  };\\n  render() {\\n    return <button onClick={this.handleClick}>{this.state.count}</button>;\\n  }\\n}\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(PrevNextNav, {\n    next: \"#\",\n    home: \"/tutorials/react/\",\n    prev: \"/tutorials/react/state\",\n    mdxType: \"PrevNextNav\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/projects/react/counterapp/"}}}